import os
import json
import logging
import asyncio
from datetime import datetime, time, timezone
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        logging.FileHandler('bot.log')  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    ]
)
logger = logging.getLogger(__name__)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –æ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('telegram').setLevel(logging.WARNING)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')
if not TOKEN:
    raise ValueError("BOT_TOKEN not found in .env file!")

ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')
if not ADMIN_CHAT_ID:
    raise ValueError("ADMIN_CHAT_ID not found in .env file!")

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
HABITS_FILE = 'data/habits.json'

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs('data', exist_ok=True)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_habits = {}

# –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
BOT_START_TIME = None

def load_habits():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
    global user_habits
    try:
        if os.path.exists(HABITS_FILE):
            with open(HABITS_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–ª—é—á–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ int
                user_habits = {int(k): v for k, v in data.items()}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–≤—ã—á–µ–∫: {e}")
        user_habits = {}

def save_habits():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫ –≤ —Ñ–∞–π–ª"""
    try:
        with open(HABITS_FILE, 'w', encoding='utf-8') as f:
            json.dump(user_habits, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–µ–∫: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_habits()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—Ç–∞—Ä–æ–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if BOT_START_TIME is not None:  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ None
            message_time = update.message.date
            if message_time < BOT_START_TIME:
                logger.info(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {update.effective_user.id} (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞)")
                return

        user = update.effective_user
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        if str(user.id) == ADMIN_CHAT_ID:
            await update.message.reply_text("–ø—Ä–∏–≤–µ—Ç")
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ü—Ä–∏–≤—ã—á–∫—É", callback_data='add_habit')],
            [InlineKeyboardButton("üìã –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏", callback_data='list_habits')],
            [InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data='mark_done')],
            [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data='delete_habit')],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
            "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏.\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ start: {e}")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—Ç–∞—Ä–æ–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if BOT_START_TIME is not None:  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ None
            message_time = update.callback_query.message.date
            if message_time < BOT_START_TIME:
                logger.info(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ callback –æ—Ç {update.effective_user.id} (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞)")
                return

        query = update.callback_query
        user = query.from_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∑–∞–ø—É—â–µ–Ω –±–æ—Ç
        if not context.user_data.get('bot_started'):
            await query.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {query.data}")
        
        await query.answer()
        await query.message.delete()
        
        if query.data == 'add_habit':
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏")
            await query.message.reply_text(
                "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å."
            )
            context.user_data['state'] = 'adding_habit'
        
        elif query.data == 'emoji_none':
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤—ã–±—Ä–∞–ª –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ —ç–º–æ–¥–∑–∏")
            user_id = user.id
            habit_index = context.user_data.get('current_habit')
            
            if user_id in user_habits and habit_index is not None:
                context.user_data['state'] = 'setting_time'
                
                keyboard = [
                    [
                        InlineKeyboardButton("09:00", callback_data='time_09:00'),
                        InlineKeyboardButton("12:00", callback_data='time_12:00'),
                        InlineKeyboardButton("15:00", callback_data='time_15:00')
                    ],
                    [
                        InlineKeyboardButton("18:00", callback_data='time_18:00'),
                        InlineKeyboardButton("21:00", callback_data='time_21:00'),
                        InlineKeyboardButton("00:00", callback_data='time_00:00')
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.message.reply_text(
                    "–•–æ—Ä–æ—à–æ, –±–µ–∑ —ç–º–æ–¥–∑–∏!\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:",
                    reply_markup=reply_markup
                )
        
        elif query.data.startswith('time_'):
            time_str = query.data.split('_')[1]
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤—ã–±—Ä–∞–ª –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {time_str}")
            user_id = user.id
            habit_index = context.user_data.get('current_habit')
            
            if user_id in user_habits and habit_index is not None:
                user_habits[user_id][habit_index]['reminder_time'] = time_str
                save_habits()
                emoji = user_habits[user_id][habit_index].get('emoji', '')
                name = user_habits[user_id][habit_index]['name']
                
                await query.message.reply_text(
                    f"–ü—Ä–∏–≤—ã—á–∫–∞ {emoji} '{name}' —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!\n"
                    f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {time_str} üéâ"
                )
                
                context.user_data['state'] = None
                context.user_data['current_habit'] = None
        
        elif query.data == 'list_habits':
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫")
            await list_habits(update, context)
        
        elif query.data == 'delete_habit':
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏")
            user_id = user.id
            if user_id not in user_habits or not user_habits[user_id]:
                await query.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.")
            else:
                keyboard = []
                for i, habit in enumerate(user_habits[user_id]):
                    emoji = habit.get('emoji', '')
                    keyboard.append([InlineKeyboardButton(f"‚ùå {emoji} {habit['name']}", callback_data=f'del_{i}')])
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.message.reply_text(
                    "–í—ã–±–µ—Ä–∏ –ø—Ä–∏–≤—ã—á–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:",
                    reply_markup=reply_markup
                )
        
        elif query.data.startswith('del_'):
            habit_index = int(query.data.split('_')[1])
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —É–¥–∞–ª—è–µ—Ç –ø—Ä–∏–≤—ã—á–∫—É —Å –∏–Ω–¥–µ–∫—Å–æ–º {habit_index}")
            user_id = user.id
            if user_id in user_habits and 0 <= habit_index < len(user_habits[user_id]):
                deleted_habit = user_habits[user_id].pop(habit_index)
                save_habits()
                emoji = deleted_habit.get('emoji', '')
                await query.message.reply_text(
                    f"–ü—Ä–∏–≤—ã—á–∫–∞ {emoji} '{deleted_habit['name']}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!"
                )
        
        elif query.data == 'stats':
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
            user_id = user.id
            if user_id not in user_habits or not user_habits[user_id]:
                await query.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
            else:
                stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º:\n\n"
                today = datetime.now(timezone.utc).date()
                total_completed = 0
                
                for habit in user_habits[user_id]:
                    emoji = habit.get('emoji', '')
                    last_checked = habit.get('last_checked')
                    completed_today = False
                    
                    if last_checked:
                        last_checked_date = datetime.fromisoformat(last_checked).date()
                        completed_today = last_checked_date == today
                        if completed_today:
                            total_completed += 1
                    
                    status = "‚úÖ" if completed_today else "‚è≥"
                    stats_text += f"{status} {emoji} {habit['name']}\n"
                    stats_text += f"   –°–µ—Ä–∏—è: {habit.get('streak', 0)} –¥–Ω–µ–π\n"
                    stats_text += f"   –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {habit.get('reminder_time', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}\n"
                    if last_checked:
                        last_checked_date = datetime.fromisoformat(last_checked).date()
                        stats_text += f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {last_checked_date.strftime('%d.%m.%Y')}\n"
                    stats_text += "\n"
                
                stats_text += f"\n–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {total_completed} –∏–∑ {len(user_habits[user_id])} –ø—Ä–∏–≤—ã—á–µ–∫"
                await query.message.reply_text(stats_text)
        
        elif query.data == 'mark_done':
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–∏–≤—ã—á–∫–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π")
            await mark_done(update, context)
        
        elif query.data.startswith('done_'):
            habit_index = int(query.data.split('_')[1])
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–º–µ—á–∞–µ—Ç –ø—Ä–∏–≤—ã—á–∫—É —Å –∏–Ω–¥–µ–∫—Å–æ–º {habit_index} –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é")
            user_id = user.id
            if user_id in user_habits and 0 <= habit_index < len(user_habits[user_id]):
                habit = user_habits[user_id][habit_index]
                today = datetime.now(timezone.utc).date()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                last_checked = habit.get('last_checked')
                if last_checked:
                    last_checked_date = datetime.fromisoformat(last_checked).date()
                    if last_checked_date == today:
                        await query.message.reply_text(
                            f"–ü—Ä–∏–≤—ã—á–∫–∞ {habit.get('emoji', '')} '{habit['name']}' —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Å–µ–≥–æ–¥–Ω—è!"
                        )
                        return
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                habit['last_checked'] = today.isoformat()
                habit['streak'] = habit.get('streak', 0) + 1
                save_habits()
                
                emoji = habit.get('emoji', '')
                await query.message.reply_text(
                    f"–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏–≤—ã—á–∫–∞ {emoji} '{habit['name']}' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!\n"
                    f"–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {habit['streak']} –¥–Ω–µ–π üî•"
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ button_handler: {e}")

async def list_habits(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫"""
    try:
        user_id = update.effective_user.id
        if user_id not in user_habits or not user_habits[user_id]:
            await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.")
            return

        habits_text = "–¢–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n\n"
        today = datetime.now(timezone.utc).date()
        for habit in user_habits[user_id]:
            emoji = habit.get('emoji', '')
            time_str = habit.get('reminder_time', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
            last_checked = habit.get('last_checked')
            completed_today = False
            
            if last_checked:
                last_checked_date = datetime.fromisoformat(last_checked).date()
                completed_today = last_checked_date == today
            
            status = "‚úÖ" if completed_today else "‚è≥"
            habits_text += f"{status} {emoji} {habit['name']}\n"
            habits_text += f"   –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {time_str}\n"
            habits_text += f"   –°–µ—Ä–∏—è: {habit.get('streak', 0)} –¥–Ω–µ–π\n\n"
        await update.message.reply_text(habits_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ list_habits: {e}")

async def mark_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
    try:
        user_id = update.effective_user.id
        if user_id not in user_habits or not user_habits[user_id]:
            await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.")
            return

        keyboard = []
        for i, habit in enumerate(user_habits[user_id]):
            emoji = habit.get('emoji', '')
            keyboard.append([InlineKeyboardButton(f"‚úÖ {emoji} {habit['name']}", callback_data=f'done_{i}')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –ø—Ä–∏–≤—ã—á–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª —Å–µ–≥–æ–¥–Ω—è:",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ mark_done: {e}")

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—Ç–∞—Ä–æ–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if BOT_START_TIME is not None:  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ None
            message_time = update.message.date
            if message_time < BOT_START_TIME:
                logger.info(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {update.effective_user.id} (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞)")
                return

        user = update.effective_user
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∑–∞–ø—É—â–µ–Ω –±–æ—Ç
        if not context.user_data.get('bot_started'):
            await update.message.reply_text("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id} ({user.first_name}): {text}")
        
        current_state = context.user_data.get('state')
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}: {text}")
        
        if current_state == 'adding_habit':
            habit_name = text
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤—ã—á–∫—É: {habit_name}")
            
            if user.id not in user_habits:
                user_habits[user.id] = []
            
            new_habit = {
                'name': habit_name,
                'created_at': datetime.now(timezone.utc).isoformat(),
                'streak': 0,
                'last_checked': None,
                'completed_today': False
            }
            
            user_habits[user.id].append(new_habit)
            save_habits()
            context.user_data['state'] = 'choosing_emoji'
            context.user_data['current_habit'] = len(user_habits[user.id]) - 1
            
            keyboard = [[InlineKeyboardButton("‚ùå –ë–µ–∑ —ç–º–æ–¥–∑–∏", callback_data='emoji_none')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"–ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–≤–æ–µ–π –ø—Ä–∏–≤—ã—á–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏ '–ë–µ–∑ —ç–º–æ–¥–∑–∏'",
                reply_markup=reply_markup
            )
        
        elif current_state == 'choosing_emoji':
            emoji = text.strip()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—ã—Ç–∞–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–º–æ–¥–∑–∏: {emoji}")
            
            if len(emoji) != 1 or not any(ord(c) > 0xFFFF for c in emoji):
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —ç–º–æ–¥–∑–∏: {emoji}")
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –æ–¥–∏–Ω —ç–º–æ–¥–∑–∏ –∏–ª–∏ –Ω–∞–∂–º–∏ '–ë–µ–∑ —ç–º–æ–¥–∑–∏'"
                )
                return
            
            habit_index = context.user_data.get('current_habit')
            
            if user.id in user_habits and habit_index is not None:
                user_habits[user.id][habit_index]['emoji'] = emoji
                save_habits()
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª —ç–º–æ–¥–∑–∏ {emoji}")
                context.user_data['state'] = 'setting_time'
                
                keyboard = [
                    [
                        InlineKeyboardButton("09:00", callback_data='time_09:00'),
                        InlineKeyboardButton("12:00", callback_data='time_12:00'),
                        InlineKeyboardButton("15:00", callback_data='time_15:00')
                    ],
                    [
                        InlineKeyboardButton("18:00", callback_data='time_18:00'),
                        InlineKeyboardButton("21:00", callback_data='time_21:00'),
                        InlineKeyboardButton("00:00", callback_data='time_00:00')
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    f"–≠–º–æ–¥–∑–∏ {emoji} –≤—ã–±—Ä–∞–Ω–æ!\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:",
                    reply_markup=reply_markup
                )
        
        elif current_state == 'setting_time':
            time_str = text
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—ã—Ç–∞–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è: {time_str}")
            
            try:
                hour, minute = map(int, time_str.split(':'))
                if not (0 <= hour <= 23 and 0 <= minute <= 59):
                    raise ValueError
                
                habit_index = context.user_data['current_habit']
                
                if user.id in user_habits and 0 <= habit_index < len(user_habits[user.id]):
                    user_habits[user.id][habit_index]['reminder_time'] = time_str
                    save_habits()
                    emoji = user_habits[user.id][habit_index].get('emoji', '')
                    name = user_habits[user.id][habit_index]['name']
                    
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≤—Ä–µ–º—è {time_str} –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ {name}")
                    await update.message.reply_text(
                        f"–ü—Ä–∏–≤—ã—á–∫–∞ {emoji} '{name}' —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!\n"
                        f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {time_str} üéâ"
                    )
                
                context.user_data['state'] = None
                context.user_data['current_habit'] = None
                
            except ValueError:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {time_str}")
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –≤—Ä–µ–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: 09:00"
                )
        else:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {text}")
            await update.message.reply_text(
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ message_handler: {e}")

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global BOT_START_TIME
    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ UTC —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º
    BOT_START_TIME = datetime.now(timezone.utc)
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ {BOT_START_TIME}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await application.initialize()
    await application.start()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
    try:
        admin_chat_id = int(os.getenv('ADMIN_CHAT_ID'))
        await application.bot.send_message(chat_id=admin_chat_id, text=f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! Admin chat ID: {admin_chat_id}")
        logger.info("Startup message sent to admin chat")
    except Exception as e:
        logger.error(f"Failed to send startup message to admin chat: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
    await application.updater.start_polling()
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    try:
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å Ctrl+C
        while True:
            await asyncio.sleep(1)
    except KeyboardInterrupt:
        pass
    finally:
        await application.updater.stop()
        await application.stop()
        await application.shutdown()

if __name__ == '__main__':
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}") 
    